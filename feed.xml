<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://akhilkatpally.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://akhilkatpally.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-10-01T12:41:35+00:00</updated><id>https://akhilkatpally.github.io/feed.xml</id><title type="html">Akhil Katpally’s blog</title><subtitle>My Person Website, please watch this space for interesting questions, thoughts and writing about technology. </subtitle><entry><title type="html">Education System for Technologically Advanced Modern World</title><link href="https://akhilkatpally.github.io/blog/2024/Education-System-Technologically-Modern-World/" rel="alternate" type="text/html" title="Education System for Technologically Advanced Modern World"/><published>2024-09-10T05:00:00+00:00</published><updated>2024-09-10T05:00:00+00:00</updated><id>https://akhilkatpally.github.io/blog/2024/Education-System-Technologically-Modern-World</id><content type="html" xml:base="https://akhilkatpally.github.io/blog/2024/Education-System-Technologically-Modern-World/"><![CDATA[<p><strong>Education System for the Technologically Advanced Modern World:</strong></p> <p><strong>This is a draft which is in initial stages of development, there is lot of work to finish it.</strong></p> <p>Number of Children attending government schools in Telangana is huge, providing quality education to all these children is a very challenging task. When proposing solutions to these problems, it is very important to judge them based on these following factors <strong>1. How easy to implement them.</strong> <strong>2. How easy to manage them</strong> <strong>3. Use of technology to automate most of the tasks.</strong> <strong>4. Careful design of the systems to solve concerns of students or teachers.</strong></p> <p>–more points to be added</p> <p><strong>Purpose of the Education:</strong></p> <p><strong>Main purpose of education is to make students think and ask questions.</strong> When I think of education system, One common event which happend in primary schools keeps recurring in my mind, where students are repeating after teacher, saying A for Apple, B for Ball etc. You go to any elementary classes, you could hear those students chanting without really understanding what they are. Ideally, teacher should be asking students what do you know of words starting with A or B. This gives students an opportunity to think and answer, even if it is wrong it is ok.</p> <p>I think this is much more deeper problem than it potrays. Since we don’t speak English language from childhood, we don’t hear that many words while growing up, it becomes difficult for children to recollect those words when teacher asks the questions. I wonder, weather memorization of concepts/ideas rather than understanding is actively ingrained to a childs brain right from very young age.</p> <p>On a much deeper level, I think having too many languages to learn also has some contribution to it. I am not sure of any country where you have to learn these many languages and also more importantly, how it effects learning and communication ability. But, there is some evidence that learning/knowing multiple languages is better for brain. I am not sure how conclusive this is.</p> <p>(Disclaimer: I am not against any religion or faith). One more problem which is deeply imbibed in our culture is Sanskrit slokas which pujaris chant or speak. We have taken for granted that they chant something and we repeat it without really understanding and would never bother to asks or understand their meaning. A child seeing these events would normalize that chanting/memorizing something without understanding is ok.</p> <p><strong>Unfinished. More coming soon.</strong></p> <p><strong>Examination System:</strong> Lowest hanging fruit to improve the education system is to fix the examination system. Simplest example is CBSE vs State Boards examination styles. Telangana Examination system is more memory based and rote learning based compared to CBSE.</p> <p>One way to improve the system is change the examination from pen and paper to computer based examination. Computer based examinations gives us freedom to completely reimagine how you can test students, instead of memorizing, rote learning and writing at the time of examination. You can test the same subjects visually or graphically or in a Question and Answer format.</p> <p>It is difficult to implement this for all classes of students and also in rural areas. Best candiates to test this system are engineering students especially computer science to start of with. For Engineering Students, it is better to move to a more practical based examination system. For example, in a computer programming class, you can give them a large code which contains bugs in it and ask them to debug and fix it. Main reason why engineering students are not hireable is because the whole system is not practical based. Everyone know that you can mug up last 3 years of question papers and get good grades.</p> <p><strong>Unfinished. More coming soon.</strong></p> <p><strong>Syllabus:</strong></p> <p>I also feel, State Syllabus has too much concepts and subjects. I don’t think knowing that many would be helpful in fact it is harmful for majority of the students. Focus of the teachers have shifted from development of skills of the students to completion of the portion. Goal of the education system should be to help student develop the skill of learning not simply covering wide range of concepts.</p> <p>There are definitely some bright students who would want to learn advance concepts, having either advanced classes for them separately or guiding them in the right direction would be enough.</p> <p><strong>Unfinished. More coming soon.</strong></p> <p><strong>Role of Technology in Education:</strong> This is huge, needs lot of thought and research.</p> <p>Use of Digital Technologies in examination, this would be a game changer …. people don’t complain this</p> <p>Pen and Paper: It is a static system. Limted Information, you can only write stuff that fits in a paper.</p> <p>Digital: It is a dynamic system, for example if you have an image, you can zoom in, zoom out and see to the smallest detail. It is an unlimited system, you can write how much ever you want.</p> <p><strong>Communication Skills:</strong></p> <p>One aspect of Education System is to learn how to think, asking questions and how to learn. But, another major aspect of it is how to <strong>express your thoughts.</strong></p> <p>IT could be orally either through presentation or informally: I do see this problem in majority of the students, generally it is wrongly attributed to English language but it is much more than that. Teaching this at a very young age would make night and day difference in a students life. Learning something at a very young age is very easy compared to learning at adult life especially when it comes to communication.</p> <p>It could be on a written format: This is consistently tested through the examinations.</p> <p>Oral presentaion from a very young age should be part of examination, not in a final exam but definately at the mid terms. If possible it should be a seperate class where a student should be tested on their presentation skills. Oral presentation is very time taking, so creating a seperate class for this will definately not disturb the individual class schedule.</p> <p><strong>Sports System in Schools:</strong> How Monetary incentives for individual schools when they win a sports competition and also sports points based system for college admissions or jobs for students would be a good motivation for schools to focus on sports.</p> <p>We all know how sports help in physical and mental development of children.</p> <p><strong>Infrastructure:</strong> • Physical Infrastructure • Digital Infrastructure</p> <p><strong>Extra Curricular Activities:</strong> Unfinished.</p> <p><strong>Decentralization of Education System:</strong> Unfinished.</p> <p><strong>Learning from alternative Schools like Jiddu Krishnamurti’s inspired Schools:</strong> Unfinished.</p> <p><strong>Role of Parents in Improving Education System:</strong> How to include parents in making the schools accountable for the education of their children.</p> <p><strong>Pre-Primary Education:</strong></p> <p><strong>Primary Education:</strong> Unfinished.</p> <p><strong>Secondary Education:</strong> Unfinished.</p> <p><strong>Higher Education:</strong> Unfinished.</p> <p><strong>Research:</strong> Unfinished.</p>]]></content><author><name></name></author><category term="Education,"/><category term="India,"/><category term="Modern"/><category term="World,"/><category term="Technology"/><category term="Education,"/><category term="India,"/><category term="Modern"/><category term="World,"/><category term="Technology"/><summary type="html"><![CDATA[Currently state of education in Telangana is very poor. This is just a brain dump of few ideas on how to improve the system.]]></summary></entry><entry><title type="html">Importance of Drinking Water and how fixing it improves the health of the people.</title><link href="https://akhilkatpally.github.io/blog/2024/Importance-of-Drinking-Water-Quality/" rel="alternate" type="text/html" title="Importance of Drinking Water and how fixing it improves the health of the people."/><published>2024-09-10T05:00:00+00:00</published><updated>2024-09-10T05:00:00+00:00</updated><id>https://akhilkatpally.github.io/blog/2024/Importance-of-Drinking-Water-Quality</id><content type="html" xml:base="https://akhilkatpally.github.io/blog/2024/Importance-of-Drinking-Water-Quality/"><![CDATA[<p><strong>On an any given day, amount of water we drink far exceeds any amount of food we eat. Even there is large quantity of water in any food we eat, with highest(90-96%) water quantify in milk, fruits and vegitables to lowest in oils.</strong> My question is, shouldn’t you take utmost care in the quality of water we drink? Eating Healthy, Low Calorie, Low Fat and Organic is important but the lowest hanging fruit to keep healthy is to drink high quality water.</p> <p>More to come —–</p>]]></content><author><name></name></author><category term="Telangana,"/><category term="Drinking"/><category term="Water,"/><category term="Water"/><category term=","/><category term="India"/><category term="Water,"/><category term="Drinking"/><category term="Water,"/><category term="Telangana,"/><category term="India"/><summary type="html"><![CDATA[How pollution of water bodies affects drinking water quality and how it is lowest hanging fruit to improve health of the people.]]></summary></entry><entry><title type="html">Understanding llm fine-tuning step to understand prompt engineering</title><link href="https://akhilkatpally.github.io/blog/2024/reverse-engineering-llm-finetuning/" rel="alternate" type="text/html" title="Understanding llm fine-tuning step to understand prompt engineering"/><published>2024-08-01T05:00:00+00:00</published><updated>2024-08-01T05:00:00+00:00</updated><id>https://akhilkatpally.github.io/blog/2024/reverse-engineering-llm-finetuning</id><content type="html" xml:base="https://akhilkatpally.github.io/blog/2024/reverse-engineering-llm-finetuning/"><![CDATA[<p>How to Write Good Prompts?</p> <p>Large Language Models are <strong>black boxes</strong>, unless we try different prompts we don’t know which prompts produce good results. There are many suggestions online on how to write good prompts either directly from model providers or practioners. When compared to general programming which is very standardized, where we have syntax and the help of api’s to write code. It is bit frustating to interact with llm and build applications since it lacks the same standardization and reliability.</p> <p><strong>Pre-trained models are practically unusable unless they are fine-tuned</strong>. It is this fine-tuning step which introduced the prompting. There are two ways you could solve this issue …..</p> <p>First, <strong>If all the llm providers release the major prompts/instructions used in the fine-tuning datasets and if we use those prompts, it will give good results</strong>. Infact, model providers are actively including all the good prompts in each iteration of the fine-tuning. All the initial versions of the models have released/described the fine-tuning datasets. It is highly unlikely they would do that now given the IP Concerns.</p> <p>Second, <strong>Reverse Engineering the fine-tuned model to understand the major prompts/instructions would be very helpful.</strong> How would you do that is the major concern, <strong>machanistic interpretability</strong> or asking the model itself or altogether using <strong>agents</strong>. Using Agents to divide the big problem into multiple small problems and using agents to solve each small problem and correcting based on the feedback seems to be the go to workflow now.</p> <p><strong>unfortunately there is no staright forward solution to these, but the idea that knowing what went into fine-tuning the llm would definately be very helpfull in writing good prompts or even designing the agentic workflows. On a very high level, fine-tuing at this stage is similar to creation of api’s in general software development. Pre-trained models have lot to say on the output of prompts, but fine-tuning also effects on the output of prompts. Exposing those api’s is how we use those functionality.</strong></p>]]></content><author><name></name></author><category term="ai,"/><category term="llm,"/><category term="fine-tuning,"/><category term="prompt"/><category term="engineering"/><category term="llm"/><category term="fine-tuning,"/><category term="prompt"/><category term="engineering,"/><category term="ai"/><summary type="html"><![CDATA[To be successfull at prompt engieering, understanding what went into llm fine-tuning is crucial.]]></summary></entry><entry><title type="html">Using Mechanistic Interpretability to understand LLM Models</title><link href="https://akhilkatpally.github.io/blog/2024/mechanistic-interpretability-copy/" rel="alternate" type="text/html" title="Using Mechanistic Interpretability to understand LLM Models"/><published>2024-08-01T05:00:00+00:00</published><updated>2024-08-01T05:00:00+00:00</updated><id>https://akhilkatpally.github.io/blog/2024/mechanistic-interpretability%20copy</id><content type="html" xml:base="https://akhilkatpally.github.io/blog/2024/mechanistic-interpretability-copy/"><![CDATA[<p>I am newbie to the field of Mechanistic Interpretability. Below are few ideas i would like to try out using mechanistic interpretability to understand LLM models. Major theme here is to have two models which are identical in every aspect but trained separately and use mechanistic interpretability to understand how features are encoded in the model.</p> <p><strong>1. Undertand the difference between pre-trained models and fine-tuned models</strong> <strong>2. Undertand the difference between two llm models (pre-trained or fine-tuned) trained on same dataset but with different hyper-parameters</strong></p> <p>Ultimate goal for me with these methods is to have a mechnaism to turn off certain features in the model. It is very lofty goal, but progressing in that direction would be paramount for realiabile systems.</p>]]></content><author><name></name></author><category term="ai,"/><category term="llm,"/><category term="mechanistic"/><category term="interpretability"/><category term="llm,"/><category term="mechanistic"/><category term="interpretability,"/><category term="ai"/><summary type="html"><![CDATA[Mechanistic Interpretability is]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://akhilkatpally.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://akhilkatpally.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://akhilkatpally.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">a post with jupyter notebook</title><link href="https://akhilkatpally.github.io/blog/2023/jupyter-notebook-second-post/" rel="alternate" type="text/html" title="a post with jupyter notebook"/><published>2023-07-04T12:57:00+00:00</published><updated>2023-07-04T12:57:00+00:00</updated><id>https://akhilkatpally.github.io/blog/2023/jupyter-notebook-second-post</id><content type="html" xml:base="https://akhilkatpally.github.io/blog/2023/jupyter-notebook-second-post/"><![CDATA[<p>To include a jupyter notebook in a post, you can use the following code:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{::nomarkdown}
<span class="cp">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">jupyter_path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'assets/jupyter/blog.ipynb'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">relative_url</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">notebook_exists</span><span class="w"> </span><span class="cp">%}{%</span><span class="w"> </span><span class="nt">file_exists</span><span class="w"> </span>assets/jupyter/blog.ipynb<span class="w"> </span><span class="cp">%}{%</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">notebook_exists</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'true'</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{%</span><span class="w"> </span><span class="nt">jupyter_notebook</span><span class="w"> </span><span class="nv">jupyter_path</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">else</span><span class="w"> </span><span class="cp">%}</span>
  &lt;p&gt;Sorry, the notebook you are looking for does not exist.&lt;/p&gt;
<span class="cp">{%</span><span class="w"> </span><span class="nt">endif</span><span class="w"> </span><span class="cp">%}</span>
{:/nomarkdown}
</code></pre></div></div> <p>Let’s break it down: this is possible thanks to <a href="https://github.com/red-data-tools/jekyll-jupyter-notebook">Jekyll Jupyter Notebook plugin</a> that allows you to embed jupyter notebooks in your posts. It basically calls <a href="https://nbconvert.readthedocs.io/en/latest/usage.html#convert-html"><code class="language-plaintext highlighter-rouge">jupyter nbconvert --to html</code></a> to convert the notebook to an html page and then includes it in the post. Since <a href="https://jekyllrb.com/docs/configuration/markdown/">Kramdown</a> is the default Markdown renderer for Jekyll, we need to surround the call to the plugin with the <a href="https://kramdown.gettalong.org/syntax.html#extensions">::nomarkdown</a> tag so that it stops processing this part with Kramdown and outputs the content as-is.</p> <p>The plugin takes as input the path to the notebook, but it assumes the file exists. If you want to check if the file exists before calling the plugin, you can use the <code class="language-plaintext highlighter-rouge">file_exists</code> filter. This avoids getting a 404 error from the plugin and ending up displaying the main page inside of it instead. If the file does not exist, you can output a message to the user. The code displayed above outputs the following:</p> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/blog.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div> <p>Note that the jupyter notebook supports both light and dark themes.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="jupyter"/><summary type="html"><![CDATA[an example of a blog post with jupyter notebook]]></summary></entry><entry><title type="html">a post with jupyter notebook</title><link href="https://akhilkatpally.github.io/blog/2023/jupyter-notebook/" rel="alternate" type="text/html" title="a post with jupyter notebook"/><published>2023-07-04T12:57:00+00:00</published><updated>2023-07-04T12:57:00+00:00</updated><id>https://akhilkatpally.github.io/blog/2023/jupyter-notebook</id><content type="html" xml:base="https://akhilkatpally.github.io/blog/2023/jupyter-notebook/"><![CDATA[<p>To include a jupyter notebook in a post, you can use the following code:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{::nomarkdown}
<span class="cp">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">jupyter_path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'assets/jupyter/blog.ipynb'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">relative_url</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">notebook_exists</span><span class="w"> </span><span class="cp">%}{%</span><span class="w"> </span><span class="nt">file_exists</span><span class="w"> </span>assets/jupyter/blog.ipynb<span class="w"> </span><span class="cp">%}{%</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">notebook_exists</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'true'</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{%</span><span class="w"> </span><span class="nt">jupyter_notebook</span><span class="w"> </span><span class="nv">jupyter_path</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">else</span><span class="w"> </span><span class="cp">%}</span>
  &lt;p&gt;Sorry, the notebook you are looking for does not exist.&lt;/p&gt;
<span class="cp">{%</span><span class="w"> </span><span class="nt">endif</span><span class="w"> </span><span class="cp">%}</span>
{:/nomarkdown}
</code></pre></div></div> <p>Let’s break it down: this is possible thanks to <a href="https://github.com/red-data-tools/jekyll-jupyter-notebook">Jekyll Jupyter Notebook plugin</a> that allows you to embed jupyter notebooks in your posts. It basically calls <a href="https://nbconvert.readthedocs.io/en/latest/usage.html#convert-html"><code class="language-plaintext highlighter-rouge">jupyter nbconvert --to html</code></a> to convert the notebook to an html page and then includes it in the post. Since <a href="https://jekyllrb.com/docs/configuration/markdown/">Kramdown</a> is the default Markdown renderer for Jekyll, we need to surround the call to the plugin with the <a href="https://kramdown.gettalong.org/syntax.html#extensions">::nomarkdown</a> tag so that it stops processing this part with Kramdown and outputs the content as-is.</p> <p>The plugin takes as input the path to the notebook, but it assumes the file exists. If you want to check if the file exists before calling the plugin, you can use the <code class="language-plaintext highlighter-rouge">file_exists</code> filter. This avoids getting a 404 error from the plugin and ending up displaying the main page inside of it instead. If the file does not exist, you can output a message to the user. The code displayed above outputs the following:</p> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/blog.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div> <p>Note that the jupyter notebook supports both light and dark themes.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="jupyter"/><summary type="html"><![CDATA[an example of a blog post with jupyter notebook]]></summary></entry><entry><title type="html">a post with videos</title><link href="https://akhilkatpally.github.io/blog/2023/videos/" rel="alternate" type="text/html" title="a post with videos"/><published>2023-04-24T21:01:00+00:00</published><updated>2023-04-24T21:01:00+00:00</updated><id>https://akhilkatpally.github.io/blog/2023/videos</id><content type="html" xml:base="https://akhilkatpally.github.io/blog/2023/videos/"><![CDATA[<p>This is an example post with videos. It supports local video files.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div> <p>It does also support embedding videos from different sources. Here are some examples:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://www.youtube.com/embed/jNQXAC9IVRw" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://player.vimeo.com/video/524933864?h=1ac4fd9fb4&amp;title=0&amp;byline=0&amp;portrait=0" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> </div>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="videos"/><summary type="html"><![CDATA[this is what included videos could look like]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://akhilkatpally.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://akhilkatpally.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://akhilkatpally.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">a distill-style blog post</title><link href="https://akhilkatpally.github.io/blog/2021/distill/" rel="alternate" type="text/html" title="a distill-style blog post"/><published>2021-05-22T00:00:00+00:00</published><updated>2021-05-22T00:00:00+00:00</updated><id>https://akhilkatpally.github.io/blog/2021/distill</id><content type="html" xml:base="https://akhilkatpally.github.io/blog/2021/distill/"><![CDATA[<h2 id="equations">Equations</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\] <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <hr/> <h2 id="citations">Citations</h2> <p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas.</p> <p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it.</p> <p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p> <hr/> <h2 id="footnotes">Footnotes</h2> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <h2 id="code-blocks">Code Blocks</h2> <p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags. An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>. For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p> <d-code block="" language="javascript"> var x = 25; function(x) { return x * x; } </d-code> <p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look good in the dark mode. You can always use the default code-highlight using the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
<span class="k">return</span> <span class="nx">x</span> <span class="err">\</span><span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <hr/> <h2 id="interactive-plots">Interactive Plots</h2> <p>You can add interative plots using plotly + iframes :framed_picture:</p> <div class="l-page"> <iframe src="/assets/plotly/demo.html" frameborder="0" scrolling="no" height="500px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <p>The plot must be generated separately and saved into an HTML file. To generate the plot that you see above, you can use the following code snippet:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span>
<span class="sh">'</span><span class="s">https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv</span><span class="sh">'</span>
<span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
<span class="n">df</span><span class="p">,</span>
<span class="n">lat</span><span class="o">=</span><span class="sh">'</span><span class="s">Latitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">lon</span><span class="o">=</span><span class="sh">'</span><span class="s">Longitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">z</span><span class="o">=</span><span class="sh">'</span><span class="s">Magnitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
<span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span>
<span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
<span class="n">mapbox_style</span><span class="o">=</span><span class="sh">"</span><span class="s">stamen-terrain</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="sh">'</span><span class="s">assets/plotly/demo.html</span><span class="sh">'</span><span class="p">)</span></code></pre></figure> <hr/> <h2 id="details-boxes">Details boxes</h2> <p>Details boxes are collapsible boxes which hide additional information from the user. They can be added with the <code class="language-plaintext highlighter-rouge">details</code> liquid tag:</p> <details><summary>Click here to know more</summary> <p>Additional details, where math \(2x - 1\) and <code class="language-plaintext highlighter-rouge">code</code> is rendered correctly.</p> </details> <hr/> <h2 id="layouts">Layouts</h2> <p>The main text column is referred to as the body. It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p> <div class="fake-img l-body"> <p>.l-body</p> </div> <p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p> <div class="fake-img l-page"> <p>.l-page</p> </div> <p>All of these have an outset variant if you want to poke out from the body text a little bit. For instance:</p> <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> <p>Occasionally you’ll want to use the full browser width. For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>. You can also inset the element a little from the edge of the browser by using the inset variant.</p> <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> <p>The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p> <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <hr/> <h2 id="other-typography">Other Typography?</h2> <p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p> <p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p> <p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p> <p>Strikethrough uses two tildes. <del>Scratch this.</del></p> <ol> <li>First ordered list item</li> <li>Another item ⋅⋅* Unordered sub-list.</li> <li>Actual numbers don’t matter, just that it’s a number ⋅⋅1. Ordered sub-list</li> <li>And another item.</li> </ol> <p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p> <p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ ⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ ⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> <ul> <li> <p>Unordered list can use asterisks</p> </li> <li> <p>Or minuses</p> </li> <li> <p>Or pluses</p> </li> </ul> <p><a href="https://www.google.com">I’m an inline-style link</a></p> <p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p> <p><a href="https://www.mozilla.org">I’m a reference-style link</a></p> <p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p> <p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p> <p>Here’s our logo (hover to see the title text):</p> <p>Inline-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1"/></p> <p>Reference-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2"/></p> <p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Python syntax highlighting</span><span class="sh">"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div> <p>Colons can be used to align columns.</p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> <table> <thead> <tr> <th>Markdown</th> <th>Less</th> <th>Pretty</th> </tr> </thead> <tbody> <tr> <td><em>Still</em></td> <td><code class="language-plaintext highlighter-rouge">renders</code></td> <td><strong>nicely</strong></td> </tr> <tr> <td>1</td> <td>2</td> <td>3</td> </tr> </tbody> </table> <blockquote> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> </blockquote> <p>Quote break.</p> <blockquote> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p> </blockquote> <p>Here’s a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p> <p>This line is also a separate paragraph, but… This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><category term="distill"/><category term="formatting"/><summary type="html"><![CDATA[an example of a distill-style blog post and main elements]]></summary></entry></feed>